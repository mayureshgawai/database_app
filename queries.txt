
* Table Creation

create table cd.User(user_id int not null AUTO_INCREMENT, user_name varchar(50), user_dob date, user_email varchar(50),
						user_created_date date, primary key (user_id));

create table cd.Bank_account(user_id int, bank_account_id int auto_increment, bank_account_number varchar(50), 
							is_user_active boolean, primary key(bank_account_id), foreign key(user_id) references cd.User(user_id));
alter table cd.bank_account modify column is_user_active boolean default True;
                            
create table cd.Transaction(Transaction_date date, user_id int, bank_account_id int, withdrawn_amount int8,
							foreign key(user_id) references cd.User(user_id), 
                            foreign key(bank_account_id) references cd.Bank_account(bank_account_id));
							
							

* Stored Procedures
1. To print all user's data
->
CREATE DEFINER=`root`@`localhost` PROCEDURE `print_users`()
BEGIN
select u.user_name, u.user_dob, u.user_email, u.user_created_date, b.bank_account_number from cd.user as u inner join 
		cd.bank_account as b on u.user_id = b.user_id order by u.user_name ASC;
END

2. To check particular user's account balance
->
CREATE PROCEDURE `check_balance` (in acc_no)
BEGIN
select u.user_name, b.amount from cd.bank_account as b inner join cd.user as u on u.user_id = b.user_id
		where b.bank_account_number=acc_no;
END


3. Withdraw Amount
->
CREATE DEFINER=`root`@`localhost` PROCEDURE `withdraw_amount`(in amt int, in acc_no varchar(50), out result boolean)
BEGIN
    select True into result from cd.bank_account where bank_account_number=acc_no and amount >= amt;
    select False into result from cd.bank_account where bank_account_number=acc_no and if((amount < amt or amount<=5000), True, False);
    select False into result from cd.bank_account where bank_account_number=acc_no and if(amount-amt<5000, True, False);
                                                
    update cd.bank_account set amount = if(@result, amount - amt, amount) where bank_account_number=acc_no;
END


